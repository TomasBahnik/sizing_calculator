# Single User API test
import re

import cpt

API_TESTS_SU_TABLE_NAME = 'API_TESTS_SU'.lower()
API_TESTS_SU_LIST_TABLE_NAME = 'API_TESTS_SU_LIST'.lower()

# Doc floe tests
DOC_FLOW_STATS_TABLE_NAME = 'DOC_FLOW_STATS'.lower()
DOC_FLOW_LIST_TABLE_NAME = 'DOC_FLOW_LIST'.lower()

# Concurrent (LoadRunner) tests raw data (not only API but all LR tests)
API_TESTS_CU_RAW_DATA_TABLE_NAME = 'API_TESTS_CU_RAW_DATA'.lower()
FE_TESTS_CU_RAW_DATA_TABLE_NAME = 'FE_TESTS_CU_RAW_DATA'.lower()
API_TESTS_CU_RUN_INFO_TABLE_NAME = 'API_TESTS_CU_RUN_INFO'.lower()
FE_TESTS_CU_RUN_INFO_TABLE_NAME = 'FE_TESTS_CU_RUN_INFO'.lower()
API_TESTS_CU_LIST_TABLE_NAME = 'API_TESTS_CU_LIST'.lower()
PROM_EXCEEDED_LIMITS_TABLE_NAME = 'PROM_EXCEEDED_LIMITS'.lower()
PROM_RESOURCES_TABLE_NAME = 'PROM_COMMON_RESOURCES'.lower()

AGGREGATE_MAX = 'max'
AGGREGATE_MIN = 'min'
AGGREGATE_MEAN = 'mean'
AGGREGATE_AVG = 'avg'
AGGREGATE_COUNT = 'count'
AGGREGATE_STD = 'std'
AGGREGATE_STDDEV = 'stddev'
AGGREGATE_90_PCT = '90%'
AGGREGATE_50_PCT = 'median'
DESCRIBE_PRIMARY_AGGREGATES = [AGGREGATE_MEAN, AGGREGATE_MIN, AGGREGATE_MAX]
DESCRIBE_SECONDARY_AGGREGATES = [AGGREGATE_COUNT, AGGREGATE_STD]
DESCRIBE_DEFAULT_PERCENTILES = ['25%', '50%', '75%']
DESCRIBE_CUSTOM_NUMERICAL_PERCENTILES = [0.5, 0.9]
DESCRIBE_CUSTOM_PERCENTILES = [f"{int(p * 100)}%" for p in DESCRIBE_CUSTOM_NUMERICAL_PERCENTILES]
DESCRIBE_ALL_AGGREGATES = DESCRIBE_PRIMARY_AGGREGATES + DESCRIBE_SECONDARY_AGGREGATES + DESCRIBE_CUSTOM_PERCENTILES
ALL_LIST_TABLES = [API_TESTS_CU_LIST_TABLE_NAME, API_TESTS_SU_LIST_TABLE_NAME, DOC_FLOW_LIST_TABLE_NAME]
FROM_TIME_ALIAS = 'FROM_TIME'
TO_TIME_ALIAS = 'TO_TIME'
COMMENT_COLUMN = 'COMMENT'
DEPLOYMENT_INFO_COLUMN = 'DEPLOYMENT_INFO'
DPM_JOB_INFO_COLUMN = 'DPM_JOB_INFO'
SNOWFLAKE_TABLE_COLUMN = 'SNOWFLAKE_TABLE'
DATA_SOURCES_COLUMN = 'DATA_SOURCES'
SOURCE_FE_TEST_COLUMN = 'SOURCE_FE_TEST'
PERIOD_UTC_COLUMN = 'PERIOD_UTC'
BASIC_COLUMNS = [FROM_TIME_ALIAS, TO_TIME_ALIAS, cpt.UUID_COLUMN]

pattern_camel_snake = re.compile(r'(?<!^)(?=[A-Z])')


def camel_to_snake(name: str, upper: bool = True) -> str:
    """Convert camel case to snake case """
    snake = pattern_camel_snake.sub('_', name)
    return snake.upper() if upper else snake.lower()


MMM_BUILD_VERSION_COLUMN = camel_to_snake(cpt.EVENT_MMM_BUILD_VERSION_KEY)
TEST_ENV_COLUMN = camel_to_snake(cpt.TEST_ENV_KEY)
MMM_DB_METRICS_COLUMN = camel_to_snake(cpt.MMM_DB_METRICS_KEY)
LIST_COLUMNS = BASIC_COLUMNS + [cpt.TEST_ENV_KEY, cpt.EVENT_MMM_BUILD_VERSION_KEY]
LIST_COLUMNS_SNAKE = BASIC_COLUMNS + [TEST_ENV_COLUMN, MMM_BUILD_VERSION_COLUMN]
MARKDOWN_LIST_COLUMNS = BASIC_COLUMNS + [MMM_BUILD_VERSION_COLUMN]

DEFAULT_SCHEMA = 'API_TESTS'
